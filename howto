#!/usr/bin/python3

"""
A script to show helpful commands when required
"""

# here we import all the libraries we need
import os
import sys
import argparse
import json
import pathlib
import glob
import re
import colorama

# some global variables we might need
appDirectory = pathlib.Path(__file__).parent.absolute()
appConfigDir = os.path.join(os.getenv("HOME"), ".config", "howto")
version = 0.1

# this is required for colorama library
colorama.init()

# if we cannot find out config directory then we have not been installed :(
if not os.path.isdir(appConfigDir):
    print("Could not find .config/howto directory.")
    sys.exit(1);


def init_argparse() -> argparse.ArgumentParser:
    """
    Setup what arguments we take, this is using the argparse library
    """
    parser = argparse.ArgumentParser(
        usage="%(prog)s [OPTION] [REGEX]",
        description="Find common recipes for command line tools"
    )
    parser.add_argument( "-l", "--list", action="store_true")
    parser.add_argument(
        "-v", "--version", action="version", version="{} version {}".format(parser.prog, version)
    )
    parser.add_argument('regex', nargs = '*')
    return parser

def read_helpfiles():
    """
    Read all the help files in to a list
    """
    data = []
    helpfileDir = os.path.join(appConfigDir, "helpfiles")
    if not os.path.isdir(helpfileDir):
        os.makedirs(helpfileDir)
    files = glob.glob(os.path.join(helpfileDir,"*.json"), recursive=True)
    for cf in files:
        with open(cf,"r") as in_file:
            new_data = json.load(in_file)
            data.append(new_data)
    return data

def print_commands():
    """
    Print the tools and services we have help files for.
    """
    data = read_helpfiles()
    for item in data:
        s = "{}".format(item["name"])
        if not type(item["synonyms"]) == list:
            item["synonyms"] = [ item["synonyms"] ]
        for synonym in item["synonyms"]:
            s += " / {}".format(synonym)
        print(s)

def find_help_for(regex: str, data: list = []):
    """
    Match a regular expression against the item
    Returns a list of matched items.
    """
    if len(data) == 0:
        data = read_helpfiles()
    if len(regex.strip()) == 0:
        return []
    reg = re.compile(regex, flags=re.IGNORECASE)

    # this will match any service level command
    new_data = []
    modified = False
    for item in data:
        if "name" in item:
            if reg.match(item["name"]) or \
                len([ x for x in item["synonyms"] if reg.match(x) ]) > 0 :
                new_data += item["commands"]
                modified = True

    if not modified:
        # then we need to match the description
        matched = []
        for item in data:
            if "description" in item:
                if reg.search(item["description"]):
                    matched += [ item ]
        return matched
    return new_data

def process_stdin():
    """
    When reading from standard in then we match per line
    """
    for line in sys.stdin:
        line = line.strip()
        if len(line) > 0:
            words = line.split(" ")
            print(colorama.Fore.WHITE+"Filter: {}".format(line))
            data = []
            for w in words:
                data = find_help_for(w, data)
            print_info(data)

def print_info(data):
    """
    Print out each matching entry in a nice colourful way
    """
    if len(data) == 0:
        print(colorama.Fore.RED+"No matching entries found.")
    else:
        for item in data:
            print(colorama.Fore.YELLOW+"{:40}".format(item["command"])+colorama.Fore.GREEN+"# {}".format(item["description"]))

def main() -> None:
    """
    This is the first function we enter and sets everything up
    """
    parser = init_argparse()
    args = parser.parse_args()
    if args.list:
        print_commands()
        sys.exit(0)
    if not args.regex:
        process_stdin()
        sys.exit(0)
    data = []
    for regex in args.regex:
        if regex == "-":
            process_stdin()
        else:
            data = find_help_for(regex, data)
    print_info(data)

if __name__ == "__main__":
    """
    This is called when this file is called directly from the command line.
    If this was used in another Python file via from/import then this would not be called.
    """
    main()

